#!/usr/bin/env python

# note this is intended as an example only -- it would almost certainly be much better to just use
# the results in HDF5 instead of CSV since PyTables has an easy to use interface and it would be
# much faster and allow much more flexibility than csv. 

# this is intended to match the format of the csvs generated by bam_liquidator_bin_plot_by_cell_type.py
# but has precise decimal averge percentiles (as opposed to integer percentiles) 

import argparse
import csv
import os
import tables

def write_csv(summary, chromosome, csv_file_path):
    print "Writing " + chromosome
    with open(csv_file_path, 'wb') as csvfile:
        writer = csv.writer(csvfile)
        header = ["bin","average cell type percentile",
                  "cell types >= 95th percentile" "cell types < 95th percentile",
                  "lines >= 95th percentile", "lines < 95th percentile",
                  "cell types >= 5th percentile", "cell types < 5th percentile",
                  "lines >= 5th percentile", "lines < 5th percentile"] 
        writer.writerow(header)
        
        # todo: check with pytables mailing list the best way to write the percentiles in decreasing order
        #       with a condition

        # without sorting finishes in about 2.2 seconds.
        # with forward sorting (default step) finishes in about 2.2 seconds.
        # with reverse sorting (step=-1) finishes after more than 8 minutes 
        sort_by_decreasing_percentile = True 

        if sort_by_decreasing_percentile:
            for row in summary.itersorted(summary.cols.avg_cell_type_percentile, checkCSI=True, step=-1):
                if row["chromosome"] == chromosome:
                    writer.writerow([row["bin_number"], row["avg_cell_type_percentile"],
                        row["cell_types_gte_95th_percentile"], row["cell_types_lt_95th_percentile"],
                        row["lines_gte_95th_percentile"], row["lines_lt_95th_percentile"],
                        row["cell_types_gte_5th_percentile"], row["cell_types_lt_5th_percentile"],
                        row["lines_gte_5th_percentile"], row["lines_lt_5th_percentile"]])
        else:
            for row in summary.read_where("chromosome == '%s'" % chromosome):
                writer.writerow([row["bin_number"], row["avg_cell_type_percentile"],
                    row["cell_types_gte_95th_percentile"], row["cell_types_lt_95th_percentile"],
                    row["lines_gte_95th_percentile"], row["lines_lt_95th_percentile"],
                    row["cell_types_gte_5th_percentile"], row["cell_types_lt_5th_percentile"],
                    row["lines_gte_5th_percentile"], row["lines_lt_5th_percentile"]])

def main():
    parser = argparse.ArgumentParser(description='Writes bamliquidator_batch.py h5 summary into a csv file.  This '
                                     'is just an example, and using h5 directly instead of csv is preferred.')
    parser.add_argument('normalized_counts_h5_file', help='the hdf5 file with a "summary" table as generated by '
                                                          'bamliquidator_batch.py')
    parser.add_argument('output_directory', help='directory to store the csv files, should already exist')
    args = parser.parse_args()

    normalized_counts = tables.open_file(args.normalized_counts_h5_file, mode = "r")

    summary = normalized_counts.root.summary
    
    chromosomes = [ 'chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr8', 'chr9', 'chrX',
                    'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17',
                    'chr18', 'chr19', 'chr20', 'chr21', 'chr22' ]

    for chromosome in chromosomes:
        write_csv(summary, chromosome, os.path.join(args.output_directory, chromosome + ".csv"))

    normalized_counts.close()

if __name__ == "__main__":
    main()

'''
   The MIT License (MIT) 

   Copyright (c) 2013 John DiMatteo (jdimatteo@gmail.com) 

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE. 
'''
